const express = require('express');
const router = express.Router();
const jwt = require('jsonwebtoken')
const bcrypt = require('bcrypt')
const db = require('./db');

let refreshTokens = []


router.delete('/logout',(req,res)=> {
    refreshTokens = refreshTokens.filter(token => token !==req.body.token)
    res.sendStatus(204)
})
router.post('/login',async(req, res) => {
    const client = db.getClient();
    const database = client.db("Blog");
    const usersCollection = database.collection('users');
    const user = await usersCollection.findOne({username:req.body.username})

    if(!user){
        return res.status(401).send('User not found');
    }
    try {
        const match = await bcrypt.compare(req.body.password, user.password)
        if (match) {
            // Passwords match, generate tokens
            const accessToken = generateAccessToken(user)
            const refreshToken = jwt.sign(user, process.env.REFRESH_TOKEN_SECRET)
            refreshTokens.push(refreshToken)
            res.json({ accessToken: accessToken, refreshToken: refreshToken })
        } else {
            // Passwords don't match
            res.status(401).send('Invalid password')
        }
    } catch {
        res.status(500).send()
    }
})
router.post('/token',(req,res) => {
    const refreshToken = req.body.token
    if(refreshToken == null) return res.sendStatus(401)
    if(!refreshTokens.includes(refreshToken)) return res.sendStatus(403)
    jwt.verify(refreshToken,process.env.REFRESH_TOKEN_SECRET,(err,user) => {
        if(err)
        {
            console.error("Token verification error:", err);
         return res.sendStatus(403)
        }
        const accessToken = generateAccessToken({name: user.name})
        res.json({accessToken: accessToken})
    })
})

function authenticateToken(req,res,next){
    const authHeader = req.headers['authorization']
    const token = authHeader && authHeader.split(' ')[1]
    if(token== null) return res.status(401)

    jwt.verify(token,process.env.ACCESS_TOKEN_SECRET,(err,user)=> {
        if(err) return res.sendStatus(403)
        req.user = user
        next()
    })
}



function generateAccessToken(user) {
    return jwt.sign({ name: user.name},process.env.ACCESS_TOKEN_SECRET,{expiresIn: '15m'})
}

module.exports = router